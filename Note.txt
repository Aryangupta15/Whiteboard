whiteboard/
├── Frontend/
│   ├── node_modules/
│   ├── src/
│   │   ├── app/
│   │   │   ├── App.css
│   │   │   └── App.jsx
│   │   ├── assets/
│   │   ├── components/
│   │   │   ├── BottomControls/
│   │   │   │   ├── BottomControls.css
│   │   │   │   └── BottomControls.jsx
│   │   │   ├── Canvas/
│   │   │   │   ├── hooks/
│   │   │   │   │   ├── useCanvasDrawing.js
│   │   │   │   │   ├── useCanvasEvents.js
│   │   │   │   │   ├── useCanvasImages.js
│   │   │   │   │   ├── useCanvasPanning.js
│   │   │   │   │   ├── useCanvasRenderer.js
│   │   │   │   │   ├── useCanvasSelection.js
│   │   │   │   │   └── useUndoRedo.js
│   │   │   │   └── Canvas.jsx
│   │   │   ├── CollaborationModal/
│   │   │   │   ├── CollaborationModal.css
│   │   │   │   └── CollaborationModal.jsx
│   │   │   ├── Rightbar/
│   │   │   │   ├── Rightbar.css
│   │   │   │   └── Rightbar.jsx
│   │   │   ├── Sidebar/
│   │   │   │   ├── Sidebar.css
│   │   │   │   └── Sidebar.jsx
│   │   │   ├── Textool/
│   │   │   └── Toolbar/
│   │   │       ├── Toolbar.css
│   │   │       └── Toolbar.jsx
│   │   │   └── Topbar/
│   │   │       ├── Topbar.css
│   │   │       └── Topbar.jsx
│   │   ├
│   │   ├── services/
│   │   │   ├── authentication/
│   │   │   │   └── auth.js
│   │   │   └── socket/
│   │   │       └── socket.js
│   │   ├── index.css
│   │   └── main.jsx
│   ├── .gitignore
│   ├── eslint.config.js
│   ├── index.html
│   ├── package-lock.json
│   ├── package.json
│   ├── README.md
│   └── vite.config.js
|
├── Backend/
│   ├── node_modules/
│   ├── src/
│   ├── .gitignore
│   ├── package-lock.json
│   ├── package.json
│   └── server.js
|
|
|__ node_modules
└── notes.txt
├── package-lock.json
└── package.json



## ** Hook That used in this code**

### 1. useCanvasDrawing 

Manage drawing operations and state:
-Drawing lifecycle control (startDrawing, updateDrawing, finishDrawing)
-Tool-specific drawing logic (pen, laser, shapes)
-Drawing state management (isDrawing, point collections)
-Shape creation with styling properties
-Drawing tool validation and state reset

### 2. useCanvasEraser

Manage eraser functionality:
-Eraser path tracking and intersection detection
-Shape marking for deletion (markedIds array)
-Erasing lifecycle control (startErasing, updateErasing, finishErasing)
-History saving before shape removal
-Eraser state management and radius configuration

### 3. useCanvasEvents

Handle all canvas interactions and events:
-Mouse event handlers (handleMouseDown, handleMouseMove, handleMouseUp)
-Keyboard shortcuts and clipboard operations
-Tool-specific event logic (drawing, erasing, selection, panning, text, image placement)
-Cursor management with custom SVG cursors
-Coordinate transformation and geometry helpers
-Mouse position tracking for UI interactions

### 4. useCanvasPanning

Manage canvas pan/zoom navigation:
-Pan state management (panOffset, isPanning, lastPanPoint)
-Panning lifecycle control (startPanning, updatePanning, stopPanning)
-Pan position utilities (resetPan, setPan)
-Coordinate transformation (getRelativeCoords) for mouse events
-Delta calculation for smooth pan movement

### 5. useCanvasRenderer

Extract all drawing/rendering logic:

-redraw() main rendering function with pan transformation
-Shape-specific drawing functions (drawPenStroke, drawLaserStroke, drawShape, drawText, drawImage)
-Canvas context management and stroke style application (applyStrokeStyle)
-Selection visualization (drawSelectionBox, drawSelectionHighlight)
-Live preview rendering for active drawing operations
-Eraser path visualization and geometric shape utilities

### 6. useCanvasSelection

Manage element selection functionality:
-Selection state management (selectedElements, selectionBox, isSelecting)
-Element selection operations (selectElement, clearSelection, selectAll)
-Selection box drawing (startSelection, updateSelection, finishSelection)
-Geometric selection detection for different shape types
-Multi-select support and selection validation utilities

### 7.  useCursor

Manage cursor behavior and custom cursor rendering:

-Mouse position tracking (updateMousePosition, getAdjustedCursorPos with pan offset)
-Canvas interaction state (isMouseInCanvas, mouse enter/leave handlers)
-Tool-specific cursor logic (getCursorStyle for different tools)
-Custom cursor rendering functions (eraser circle, image placement preview, crosshair)
-Cursor visibility control (hideCursor, showCursor) and dynamic cursor updates



### 8. useUndoRedo

Manage canvas history and undo/redo operations:
-History state management (undoHistory, redoHistory arrays)
-State persistence (saveToHistory with deep cloning)
-Undo/redo operations with selection clearing callbacks
-History validation (canUndo, canRedo availability checks)
-Parent component integration via callback exposure